pipeline {
    agent any
    parameters {
        choice(name: 'PIPELINE_ACTION', choices: ['build & deploy', 'build only', 'deploy only'], description: 'Choose pipeline action')
        string(name: 'CUSTOM_BUILD_NUMBER', defaultValue: "${BUILD_NUMBER}", description: 'Image tag (default: BUILD_NUMBER)')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        
        // Checkbox-style environment selection
        booleanParam(name: 'DEPLOY_K8S', defaultValue: false, description: 'Deploy to Kubernetes')
        booleanParam(name: 'DEPLOY_AWS', defaultValue: false, description: 'Deploy to AWS')
        booleanParam(name: 'DEPLOY_ONPREM', defaultValue: false, description: 'Deploy to On-Prem')
    }

    environment {
        DOCKER_REGISTRY = 'your-docker-registry'
        IMAGE_NAME = "nouraldeen152/networkapp"
        IMAGE_TAG = "${params.CUSTOM_BUILD_NUMBER}"
        REMOTE_USER = 'jenkins-remote'
        REMOTE_HOST = '192.168.1.150'
        REMOTE_DIR = "/home/jenkins-remote/"
        KUBECONFIG = "${WORKSPACE}/.kube/config"
    }

    stages {
        // Stage 1: Setup (hardcoded)
        stage('Setup Environment') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws_ec2_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
                            mkdir -p .ssh
                            cat $SSH_KEY > .ssh/ssh_key.pem
                            chmod 400 .ssh/ssh_key.pem
                            echo 'ssh_key_file=".ssh/ssh_key.pem"' >> terraform.tfvars
                        """
                    }
                }
            }
        }

        // Stage 2: Parallel Build Phase
        stage('Build Phase') {
            when {
                expression { params.PIPELINE_ACTION in ['build only', 'build & deploy'] }
            }
            parallel {
                // Parallel Image Building
                stage('Build Images') {
                    steps {
                        script {
                            images.prepare()
                            images.build()
                        }
                    }
                }

                // Parallel Infrastructure Setup
                stage('Build Infrastructure') {
                    steps {
                        script {
                            if (params.DEPLOY_K8S) { k8s.buildInfra() }
                            if (params.DEPLOY_AWS) { aws.buildInfra() }
                            if (params.DEPLOY_ONPREM) { onprem.buildInfra() }
                        }
                    }
                }
            }
        }

        // Stage 3: Push Images
        stage('Push Images') {
            when {
                expression { params.PIPELINE_ACTION in ['build only', 'build & deploy'] }
            }
            steps {
                script {
                    images.push()
                }
            }
        }

        // Stage 4: Testing
        stage('Testing') {
            when {
                allOf {
                    expression { !params.SKIP_TESTS }
                    expression { params.PIPELINE_ACTION in ['build & deploy', 'deploy only'] }
                }
            }
            steps {
                echo 'Running test suite...'
                // Add your test commands here
            }
        }

        // Stage 5: Parallel Deploy Phase
        stage('Deploy Phase') {
            when {
                expression { params.PIPELINE_ACTION in ['deploy only', 'build & deploy'] }
            }
            parallel {
                // Kubernetes Deployment
                stage('Deploy to K8s') {
                    when { expression { params.DEPLOY_K8S } }
                    steps {
                        script {
                            k8s.prepare()
                            k8s.deploy()
                        }
                    }
                }

                // AWS Deployment
                stage('Deploy to AWS') {
                    when { expression { params.DEPLOY_AWS } }
                    steps {
                        script {
                            aws.prepare()
                            aws.deploy()
                        }
                    }
                }

                // OnPrem Deployment
                stage('Deploy to OnPrem') {
                    when { expression { params.DEPLOY_ONPREM } }
                    steps {
                        script {
                            onprem.prepare()
                            onprem.deploy()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            sh 'rm -rf .ssh'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

// ===== SHARED MODULES ===== //

def images = {
    prepare: {
        echo "Preparing image build environment for ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    },
    build: {
        sh """
            docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
            cd nginx
            docker build -t ${env.IMAGE_NAME}/nginx_reverse_proxy:${env.IMAGE_TAG} .
        """
    },
    push: {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
            sh """
                docker login -u $USER -p $PASS ${env.DOCKER_REGISTRY}
                docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}
                docker push ${env.IMAGE_NAME}/nginx_reverse_proxy:${env.IMAGE_TAG}
            """
        }
    }
}

// ===== ENVIRONMENT MODULES ===== //

def k8s = {
    buildInfra: {
        echo "Building Kubernetes infrastructure"
        sh 'ansible-playbook k8s/setup-cluster.yml'
    },
    prepare: {
        echo "Preparing Kubernetes environment"
        withCredentials([string(credentialsId: 'kubeconfig-secret', variable: 'KUBECONFIG_BASE64')]) {
            sh """
                mkdir -p ${env.KUBECONFIG}
                echo ${KUBECONFIG_BASE64} | base64 --decode > ${env.KUBECONFIG}
                chmod 600 ${env.KUBECONFIG}
            """
        }
    },
    deploy: {
        echo "Deploying to Kubernetes"
        dir('kubernetes/') {
            sh """
                kubectl get nodes --kubeconfig=${env.KUBECONFIG}
                ./manage.sh apply
            """
        }
    }
}

def aws = {
    buildInfra: {
        echo "Building AWS infrastructure"
        dir('terraform/') {
            withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                            credentialsId: 'aws-credentials', 
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh """
                    terraform init -reconfigure
                    terraform apply -auto-approve
                """
            }
        }
    },
    prepare: {
        echo "Preparing AWS environment"
        sh "cp docker-compose.yml ansible/roles/docker_compose/files/"
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/hosts",
            extraVars: [
                selected_roles: 'docker_install',
                ansible_ssh_private_key_file: '.ssh/ssh_key.pem'
            ]
        )
    },
    deploy: {
        echo "Deploying to AWS"
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/hosts",
            extraVars: [
                selected_roles: 'docker_compose',
                IMAGE_TAG: "${env.IMAGE_TAG}",
                ansible_ssh_private_key_file: '.ssh/ssh_key.pem'
            ]
        )
    }
}

def onprem = {
    buildInfra: {
        echo "Building OnPrem infrastructure"
        sh "ansible-playbook onprem/setup-servers.yml"
    },
    prepare: {
        echo "Preparing OnPrem environment"
    },
    deploy: {
        echo "Deploying to OnPrem"
        sshagent(['jenkins-remote-credentials']) {
            sh """
                scp docker-compose.yml ${env.REMOTE_USER}@${env.REMOTE_HOST}:${env.REMOTE_DIR}/
                ssh ${env.REMOTE_USER}@${env.REMOTE_HOST} "cd ${env.REMOTE_DIR} && BUILD_NUMBER=${env.IMAGE_TAG} docker compose up -d"
            """
        }
    }
}