def images = [
    prepare: {
        echo "Preparing image build environment for ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    },
    build: {
        dir('src/') {
            sh """
                docker build -t ${env.IMAGE_NAME}:${IMAGE_TAG}  .
            """
        }
        // dir('nginx/') {
        //     sh """
        //     docker build -t nouraldeen152/nginx_reverse_proxy:${IMAGE_TAG}  .
        //   """
        // }

        },
    push: {
        echo 'push images in my public regitry '
        withCredentials([usernamePassword(credentialsId: "${env.CREDENTIALS_DOCKERHUB}", passwordVariable: 'PASS', usernameVariable: 'USER')]) {

            sh """
                docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}
            """
        }
    }
]

// ===== ENVIRONMENT MODULES ===== //

def k8s = [
    buildInfra: {
        echo "Building Kubernetes infrastructure"
        // Placeholder for Kubernetes infrastructure setup
    },
    prepare: {
        echo "Preparing Kubernetes environment"
        withCredentials([string(credentialsId: "${env.CREDENTIALS_KUBECONFIG}", variable: 'KUBECONFIG_BASE64')]) {
        // Decode the kubeconfig and write it to a file
        sh """
            mkdir -p ${WORKSPACE}/.kube
            echo ${KUBECONFIG_BASE64} | base64 --decode > ${KUBECONFIG}
            chmod 600 ${KUBECONFIG}
        """
    }

    },
    deploy: {
        echo "Deploying to Kubernetes"
        sh """
            kubectl get nodes --kubeconfig=${KUBECONFIG}
            helm upgrade --install my-app ./helm/networkapp \
            --set app.container.tag=${IMAGE_TAG} \
            --set app.container.image=${IMAGE_NAME} \
            --kubeconfig ${KUBECONFIG} \
            --atomic
        """
        // dir('kubernates/') {
        //     sh """
        //         // kubectl get nodes --kubeconfig=${KUBECONFIG}
        //         // echo ${KUBECONFIG}
        //         // export KUBECONFIG=${KUBECONFIG}
        //         // chmod +x ./manage.sh 
        //         // ./manage.sh delete 2>/dev/null || true 
        //         // ./manage.sh apply
        //     """
        // }

    }
]

def aws = [
    // Build AWS infrastructure using Terraform    
    buildInfra: {
        echo "Building AWS infrastructure"
        dir('terraform/') {
            withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                 credentialsId: "${env.CREDENTIALS_AWS_ACCOUNT}" , 
                                 secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh """
                    terraform init  -upgrade 
                    terraform apply -auto-approve 
                """ 
            }
        }
    },
    prepare_deployment: {
        echo "Preparing AWS environment"
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/inventory/",
            limit: "${env.HOST_SUBSET_AWS}",
            credentialsId: "${env.CREDENTIALS_AWS_SSH}", // Leave empty since we’re using a dynamic key
            extraVars: [
                ansible_os_family : 'Debian',
                selected_roles: 'docker_install'
                // ansible_ssh_private_key_file: '.ssh/ssh_key.pem'
            ]
        )
    },
    deploy: {
        echo "Deploying to AWS"
        // sh """
        // cp docker-compose.yml ansible/roles/docker_compose/files/docker-compose.yml
        // """
        // Runs Ansible to run docker-compose on target environments
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/inventory/",
            limit: "${env.HOST_SUBSET_AWS}",
            credentialsId: "${env.CREDENTIALS_AWS_SSH}", // Leave empty since we’re using a dynamic key
            extraVars: [
                selected_roles: 'deploy_dockercommunity',
                IMAGE_TAG: "${IMAGE_TAG}"
                // ansible_ssh_private_key_file: '.ssh/ssh_key.pem'
            ]
        )
    }
]

def onprem = [
    buildInfra: {
        echo "Building OnPrem infrastructure"
        // Placeholder for OnPrem infrastructure setup
    },
    prepare_deployment: {
        echo "Preparing OnPrem environment"
        // Runs Ansible to install packages (e.g., Docker) on target environments
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/inventory/",
            limit: "${env.HOST_SUBSET_ONPREM}",
            credentialsId: "${env.CREDENTIALS_ONPREM_SERVER}", 
            extraVars: [
                selected_roles: 'docker_install',
                ansible_os_family : 'RedHat'
            ]
        )
    },
    deploy: {
        echo "Deploying to OnPrem"
        // sh """
        // cp docker-compose.yml ansible/roles/docker_compose/files/docker-compose.yml
        // """
        // Runs Ansible to run docker-compose on target environments
        ansiblePlaybook(
            playbook: "ansible/site.yml",
            inventory: "ansible/inventory/",
            limit: "${env.HOST_SUBSET_ONPREM}",
            credentialsId: "${env.CREDENTIALS_ONPREM_SERVER}", 
            extraVars: [
                selected_roles: 'deploy_dockercommunity',
                IMAGE_TAG: "${IMAGE_TAG}"
            ]
        )
    
    }

]


pipeline {
    agent any
    // Define parameters
    parameters {
        choice(name: 'PIPELINE_ACTION', choices: ['','build & deploy', 'build only', 'deploy only'], description: 'Choose pipeline action')
        string(name: 'IMAGE_TAG', defaultValue: "${BUILD_NUMBER}", description: 'Image tag (default: BUILD_NUMBER)')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
        // Checkbox-style environment selection
        booleanParam(name: 'DEPLOY_K8S', defaultValue: false, description: 'Deploy to Kubernetes')
        booleanParam(name: 'DEPLOY_AWS', defaultValue: false, description: 'Deploy to AWS')
        booleanParam(name: 'DEPLOY_ONPREM', defaultValue: false, description: 'Deploy to On-Prem support for remote machine')
        // Add more parameters as needed
   }    

    stages {
        // Stage 1: Setup (hardcoded)
        stage('Load Variables') {
            steps {
                script {
                        def data = load 'jenkins/config.groovy'
                        if (!(data instanceof Map) || !data.config || !data.flags) {
                            error "config.groovy must return a Map with 'config' and 'flags' sections"
                        }
                        // Assign config section to env
                        data.config.each { key, value ->
                            env."${key}" = value
                        }
                        // Assign flags, prioritize params or defaults
                        data.flags.each { key, value ->

                            env."${key}" = params[key]  ?: value 
                        }

                }
            }
        }    
          
//        Stage 2: Parallel Build Phase
        stage('Build Phase') {
            parallel {
                // Parallel Image Building
                stage('Build Images') {
                 when { expression { env.PIPELINE_ACTION in ['build only', 'build & deploy'] }}
                    steps {
                        script {
                            // build Docker images
                            images.build()
                        }
                    }
                }

                // Parallel Infrastructure Setup
                stage('Build Infrastructure') {
                    steps {
                        script {
                            if (env.DEPLOY_K8S == 'true') { k8s.buildInfra() }       // Not supported yet
                            if (env.DEPLOY_AWS == 'true') {  aws.buildInfra() }
                            if (env.DEPLOY_ONPREM == 'true') { onprem.buildInfra() } // Not supported yet
                        }
                    }
                }
            }
        }
        // Stage 3: Push Images
        stage('Push Images') {
            when {
                expression { env.PIPELINE_ACTION in ['build only', 'build & deploy'] }
            }
            steps {
                script {
                    images.push()
                }
            }
        }
        // Stage 4: Testing
        stage('Testing') {
            when {
                allOf {
                    expression { !env.SKIP_TESTS }
                    expression { env.PIPELINE_ACTION in ['build & deploy', 'deploy only'] }
                }
            }
            steps {
                echo 'Running test suite...'
                // Add your test commands here
            }
        }
        // Stage 5: Parallel Deploy Phase
        stage('Deploy Phase') {
            when {
                expression { env.PIPELINE_ACTION in ['deploy only', 'build & deploy'] }
            }
            parallel {
                // Kubernetes Deployment
                stage('Deploy to K8s') {
                    when { expression { env.DEPLOY_K8S == 'true'} }
                    steps {
                        script {
                            k8s.prepare()
                            k8s.deploy()
                        }
                    }
                }

                // AWS Deployment
                stage('Deploy to AWS') {
                    when { expression { env.DEPLOY_AWS == 'true' } }
                    steps {
                        script {
                            aws.prepare_deployment()
                            aws.deploy()
                        }
                    }
                }

                // OnPrem Deployment
                stage('Deploy to OnPrem') {
                    when { expression { env.DEPLOY_ONPREM == 'true' } }
                    steps {
                        script {
                            onprem.prepare_deployment()
                            onprem.deploy()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
                echo "Cleaning up workspace..."       
                }
        success {

            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "✅ Pipeline SUCCESSFUL: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
        failure {
            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "❌ Pipeline FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
        unstable {
            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "⚠️ Pipeline UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
    }        

}

