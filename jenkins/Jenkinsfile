pipeline {
    agent any
    // Define parameters
    parameters {
        choice(
            name: 'DEPLOY_TARGET',
            choices: ['kubernetes', 'docker', 'both'],
            description: 'Select the deployment target'
        )
        choice(
            name: 'PIPELINE_ACTION',
            choices: ['build & deploy','build only', 'deploy only'],
            description: 'Choose to build only, deploy only, or both build and deploy'
        )
        string(name: 'CUSTOM_BUILD_NUMBER', defaultValue: "${BUILD_NUMBER}", description: 'specify  image tag or BUILD_NUMBER will be as default')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
    }

    environment {
        DOCKER_REGISTRY = 'your-docker-registry' // e.g., Docker Hub
        IMAGE_NAME = "nouraldeen152/networkapp"
        IMAGE_TAG =  "${params.CUSTOM_BUILD_NUMBER}" // Use custom build number or default to BUILD_NUMBER
        REMOTE_USER = 'jenkins-remote'
        REMOTE_HOST = '192.168.1.150'
        REMOTE_DIR = "/home/jenkins-remote/"
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        SLACK_CHANNEL = '#team-project' // Slack channel to send notifications
    }
stages {
    stage('Setup') {
        steps {

                script {
                    // Define config file path in repo
                    def configFile = "${WORKSPACE}/deploy.conf"
    
                    // Initialize with defaults from parameters
                    def deployTarget = params.DEPLOY_TARGET
                    def pipelineAction = params.PIPELINE_ACTION
                    def customBuildNumber = params.CUSTOM_BUILD_NUMBER
                    def skipTests = params.SKIP_TESTS
                     // Log for debugging
                    sh  """
                            echo "fuck you"
                        """
                        echo "Current workspace: ${WORKSPACE}"
            sh """
                pwd
                ls -l ${WORKSPACE}
                ls -l .
                                    echo "Current workspace: ${configFile}"
    
            """
                    // Check if config file exists
                    if (fileExists('deploy.conf')) {
                      echo "File src/main/resources/index.html found!"   
                     // Log for debugging

                        // // Read file content
                        // def config = readFile(configFile).trim()
                        // // Parse each parameter using regex
                        // def matcher

                        // // DEPLOY_TARGET
                        // matcher = config =~ /DEPLOY_TARGET=([^\n]*)/
                        // if (matcher && matcher[0][1] in ['kubernetes', 'docker', 'both']) {
                        //     deployTarget = matcher[0][1]
                        // }

                        // // PIPELINE_ACTION
                        // matcher = config =~ /PIPELINE_ACTION=([^\n]*)/
                        // if (matcher && matcher[0][1] in ['build & deploy', 'build only', 'deploy only']) {
                        //     pipelineAction = matcher[0][1]
                        // }

                        // // CUSTOM_BUILD_NUMBER
                        // matcher = config =~ /CUSTOM_BUILD_NUMBER=([^\n]*)/
                        // if (matcher && matcher[0][1]) {
                        //     customBuildNumber = matcher[0][1]
                        // }

                        // // SKIP_TESTS
                        // matcher = config =~ /SKIP_TESTS=([^\n]*)/
                        // if (matcher && matcher[0][1] in ['true', 'false']) {
                        //     skipTests = matcher[0][1] == 'true'
                        // }
                    }

                    // // Override parameters
                    // params.DEPLOY_TARGET = deployTarget
                    // params.PIPELINE_ACTION = pipelineAction
                    // params.CUSTOM_BUILD_NUMBER = customBuildNumber
                    // params.SKIP_TESTS = skipTests


                }
                                    // Log for debugging
                    sh  """
                            echo "Set parameters: DEPLOY_TARGET=${params.DEPLOY_TARGET}, PIPELINE_ACTION=${params.PIPELINE_ACTION}, CUSTOM_BUILD_NUMBER=${params.CUSTOM_BUILD_NUMBER}, SKIP_TESTS=${params.SKIP_TESTS}"
                        """
            }
            }        
        stage('build docker image') {
            when {
                expression { return params.PIPELINE_ACTION == 'build only' || params.PIPELINE_ACTION == 'build & deploy' }
            }

            steps {
                sh """
                    docker build -t ${env.IMAGE_NAME}:${IMAGE_TAG}  .
                    cd nginx
                    docker build -t nouraldeen152/nginx_reverse_proxy:${IMAGE_TAG}  .
                """
            }
        }
        stage('Push Docker Image') {
            when {
                expression { return params.PIPELINE_ACTION == 'build only' || params.PIPELINE_ACTION == 'build & deploy' }
            }
            steps {
                echo 'push images in my public regitry '
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'PASS', usernameVariable: 'USER')]) {

                    sh """

                        docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}
                        docker push nouraldeen152/nginx_reverse_proxy:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('test') {
            steps {
                sh 'echo test stage'
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                allOf {
                        expression { return params.DEPLOY_TARGET == 'kubernetes' || params.DEPLOY_TARGET == 'both' }
                        expression { return params.PIPELINE_ACTION == 'deploy only' || params.PIPELINE_ACTION == 'build & deploy' }
                    }
            }
            steps {
                    withCredentials([string(credentialsId: 'kubeconfig-secret', variable: 'KUBECONFIG_BASE64')]) {
                        // Decode the kubeconfig and write it to a file
                        sh """
                            mkdir -p ${WORKSPACE}/.kube
                            echo ${KUBECONFIG_BASE64} | base64 --decode > ${KUBECONFIG}
                            chmod 600 ${KUBECONFIG}
                        """
                        dir('kubernates/') {
                        sh """
                        kubectl get nodes --kubeconfig=${KUBECONFIG}
                        echo ${KUBECONFIG}
                        export KUBECONFIG=${KUBECONFIG}
                        chmod +x ./manage.sh 
                        ./manage.sh apply
                          """
                     }

                    }           
             }
        }

        stage('Deploy to Docker') {
            when {
                    allOf {
                        expression { return params.DEPLOY_TARGET == 'docker' || params.DEPLOY_TARGET == 'both' }
                        expression { return params.PIPELINE_ACTION == 'deploy only' || params.PIPELINE_ACTION == 'build & deploy' }
                    }
                }
            steps {
                sshagent(['jenkins-remote-credentials']) {
                    sh """
                        scp docker-compose.yml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/
                        ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_DIR}  && BUILD_NUMBER=${IMAGE_TAG} docker compose up -d"
                    """
                }
            // Ensure BUILD_NUMBER is available for docker-compose
            // sh "BUILD_NUMBER=${BUILD_NUMBER} docker compose up -d"
            }
        }
    }
    post {
        success {
            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "✅ Pipeline SUCCESSFUL: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
        failure {
            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "❌ Pipeline FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
        unstable {
            slackSend(
                channel: env.SLACK_CHANNEL,
                message: "⚠️ Pipeline UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}"
            )
        }
    }
}
