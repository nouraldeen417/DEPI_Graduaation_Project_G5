pipeline {
    agent any
    // Define parameters
    parameters {
        choice(
            name: 'DEPLOY_TARGET',
            choices: ['kubernetes', 'docker', 'both'],
            description: 'Select the deployment target'
        )
        choice(
            name: 'PIPELINE_ACTION',
            choices: ['build & deploy','build only', 'deploy only'],
            description: 'Choose to build only, deploy only, or both build and deploy'
        )
        string(name: 'CUSTOM_BUILD_NUMBER', defaultValue: "${BUILD_NUMBER}", description: 'specify  image tag or BUILD_NUMBER will be as default')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip running tests')
    }

    environment {
        DOCKER_REGISTRY = 'your-docker-registry' // e.g., Docker Hub
        IMAGE_NAME = "nouraldeen152/networkapp"
        IMAGE_TAG =  "${params.CUSTOM_BUILD_NUMBER}" // Use custom build number or default to BUILD_NUMBER
        REMOTE_USER = 'jenkins-remote'
        REMOTE_HOST = '192.168.1.150'
        REMOTE_DIR = "/home/jenkins-remote/"
        KUBECONFIG = "${WORKSPACE}/.kube/config"
    }
    stages {
        stage('build docker image') {
            when {
                expression { return params.PIPELINE_ACTION == 'build only' || params.PIPELINE_ACTION == 'build & deploy' }
            }

            steps {
                sh """
                    docker build -t ${env.IMAGE_NAME}:${IMAGE_TAG}  .
                    cd nginx
                    docker build -t nouraldeen152/nginx_reverse_proxy:${IMAGE_TAG}  .
                """
            }
        }
        stage('Push Docker Image') {
            when {
                expression { return params.PIPELINE_ACTION == 'build only' || params.PIPELINE_ACTION == 'build & deploy' }
            }
            steps {
                echo 'push images in my public regitry '
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'PASS', usernameVariable: 'USER')]) {

                    sh """

                        docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}
                        docker push nouraldeen152/nginx_reverse_proxy:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('test') {
            steps {
                sh 'echo test stage'
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                allOf {
                        expression { return params.DEPLOY_TARGET == 'kubernetes' || params.DEPLOY_TARGET == 'both' }
                        expression { return params.PIPELINE_ACTION == 'deploy only' || params.PIPELINE_ACTION == 'build & deploy' }
                    }
            }
            steps {
                    withCredentials([string(credentialsId: 'kubeconfig-secret', variable: 'KUBECONFIG_BASE64')]) {
                        // Decode the kubeconfig and write it to a file
                        sh """
                            mkdir -p ${WORKSPACE}/.kube
                            echo ${KUBECONFIG_BASE64} | base64 --decode > ${KUBECONFIG}
                            chmod 600 ${KUBECONFIG}
                        """
                        dir('kubernates/') {
                        sh """
                        kubectl get nodes --kubeconfig=${KUBECONFIG}
                        echo ${KUBECONFIG}
                        export KUBECONFIG=${KUBECONFIG}
                        chmod +x ./manage.sh 
                        ./manage.sh apply
                          """
                     }

                    }           
             }
        }

        stage('Deploy to Docker') {
            when {
                    allOf {
                        expression { return params.DEPLOY_TARGET == 'docker' || params.DEPLOY_TARGET == 'both' }
                        expression { return params.PIPELINE_ACTION == 'deploy only' || params.PIPELINE_ACTION == 'build & deploy' }
                    }
                }
            steps {
                sshagent(['jenkins-remote-credentials']) {
                    sh """
                        scp docker-compose.yml ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/
                        ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_DIR}  && BUILD_NUMBER=${IMAGE_TAG} docker compose up -d"
                    """
                }
            // Ensure BUILD_NUMBER is available for docker-compose
            // sh "BUILD_NUMBER=${BUILD_NUMBER} docker compose up -d"
            }
        }
    }
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            script {
                echo "Build failed. Deleting Docker image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                // withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'PASS', usernameVariable: 'USER')])
                //     {
                //         sh """
                //         docker login -u $USER -p $PASS
                //         docker rmi ${IMAGE_NAME}:${IMAGE_TAG} 
                //         docker rmi nouraldeen152/nginx_reverse_proxy:${IMAGE_TAG} 
                //         """
                //     }
            }
            
        }
    }
}
